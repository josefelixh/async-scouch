{"name":"Async-scouch","tagline":"Asynchronoush non-blocking BigCouch/Cloudant client.","body":"# Async-scouch\r\nAsync-scouch is a BigCouch/Cloudant client library. It based on top of netty, ning asynchronous http client and the super cool play-json libraries based on jerkson/jackson. So far is targets scala, but the intention is to make it work for java as well.\r\n\r\n\r\n### Usage (Scala)\r\n\r\n##### Basic CRUD operations\r\n\r\nFirst you need some stuff to persist.\r\n\r\n    case class Role(name: String, permissions: Int)\r\n    case class Profile(id: String, level: Int, roles: Seq[Role])\r\n    \r\n    val role = Role(\"admin\", 777)\r\n    val profile = Profile(\"badger\", 0, Vector(role))\r\n    \r\n    \r\nThen configure the client\r\n\r\n    val credentials = Some((\"username\", \"password\"))\r\n    val couchConfig = CouchConfig(\"https://couchinstance.com:port\", \"dbname\", credentials)\r\n\r\n    implicit val executionContext = ExecutionContext.Implicits.global\r\n    implicit val couch = Couch(couchConfig)\r\n    \r\nProvide a way to serialise/deserialise your objects to json\r\n\r\n    implicit val roleFormat = Json.format[Role]\r\n    implicit val profileFormat = Json.format[Profile]\r\n    \r\nThen you can just use CouchDocument to do CRUD operations with your objects. \r\n\r\n    val future = for {\r\n      createdNoId <- CouchDocument(profile).create\r\n      created <- CouchDocument(\"PROFILE_ID\", profile).create\r\n      docId = Id[Profile](createdNoId.id.get)\r\n      retreived <- docId.retrieve\r\n      updated <- createdNoId.update(current => current.copy(level = 1))\r\n      updateRetreived <- docId.retrieve\r\n      deleteResponse <- updated.delete\r\n      deleteResponse2 <- created.delete\r\n    } yield {\r\n      println(s\"CREATED : $createdNoId\")\r\n      println(s\"CREATED : $created\")\r\n      println(s\"RETREIVED : $retreived\")\r\n      println(s\"UPDATED : $updated\")\r\n      println(s\"RETREIVED : $updateRetreived\")\r\n      println(s\"DELETED : ${deleteResponse.json}\")\r\n      println(s\"DELETED : ${deleteResponse2.json}\")\r\n    }\r\n\r\n    future.onComplete { \r\n      case Success(x) => println(\"Easy!!!\")\r\n      case Failure(t) => println(\"An error has occured: \" + t.getMessage)\r\n    }\r\n    \r\n    \r\nIn order to see some results it is needed to wait for the future, but this is something you might not want to do in your application.\r\n\r\n    Await.result(future, 10 seconds)\r\n\r\n##Licence\r\n\r\n  This software is licensed under the Apache 2 license, quoted below.\r\n\r\n  Copyright 2013 josefelixh (http://github.com/josefelixh).\r\n    \r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n\r\n  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}